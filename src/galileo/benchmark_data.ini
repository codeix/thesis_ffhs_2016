[nop]
desc="nop" is a pseudo-instruction and the assembler generates an alternative instruction that does nothing. This instruction is executed one time each loop.
bench=nop


[nop_nop]
desc="nop" is a pseudo-instruction and the assembler generates an alternative instruction that does nothing. This instruction is executed two times each loop.
bench=
  nop
  nop


[nop_nop_nop]
desc="nop" is a pseudo-instruction and the assembler generates an alternative instruction that does nothing. This instruction is executed three times each loop.
bench=
  nop
  nop
  nop


[addl_0]
desc=An addition of 0x00000000 + 0x00000000 bits.
pre=
  movl $0, %eax
  movl $0, %ebx
bench=
  addl %ebx, %eax
  movl $0, %ebx 


[addl_32]
desc=An addition of 0xFFFFFFFF + 0xFFFFFFFF bits.
pre=
  movl $0xFFFFFFFF, %eax
  movl $0xFFFFFFFF, %ebx
bench=
  addl %ebx, %eax
  movl $0xFFFFFFFF, %ebx


[subl_0]
desc=An subtraction of 0x00000000 - 0x00000000 bits.
pre=
  movl $0, %eax
  movl $0, %ebx
bench=
  subl %ebx, %eax
  movl $0, %ebx 


[subl_32]
desc=An subtraction of 0xFFFFFFFF - 0xFFFFFFFF bits.
pre=
  movl $0xFFFFFFFF, %eax
  movl $0xFFFFFFFF, %ebx
bench=
  subl %ebx, %eax
  movl $0xFFFFFFFF, %ebx


[shr_0]
desc=Shift one postion to right with an 0x00000000 bit register.
pre=
  movl $0x00000000, %ebx
bench=
  shr $1, %ebx
  movl $0x00000000, %ebx


[shr_32]
desc=Shift one postion to right with an 0xFFFFFFFF bit register.
pre=
  movl $0xFFFFFFFF, %ebx
bench=
  shr $1, %ebx
  movl $0xFFFFFFFF, %ebx


[shl_0]
desc=Shift one postion to left with an 0x00000000 bit register.
pre=
  movl $0x00000000, %ebx
bench=
  shl $1, %ebx
  movl $0x00000000, %ebx


[shl_32]
desc=Shift one postion to left with an 0xFFFFFFFF bit register.
pre=
  movl $0xFFFFFFFF, %ebx
bench=
  shl $1, %ebx
  movl $0xFFFFFFFF, %ebx


[imull_0]
desc=A multiplication of 0x00000000 * 0x00000000 bits.
pre=
  movl $0, %eax
  movl $0, %ebx
bench=
  imull %ebx, %eax
  movl $0, %ebx


[imull_32]
desc=A multiplication of 0xFFFFFFFF * 0xFFFFFFFF bits.
pre=
  movl $0xFFFFFFFF, %eax
  movl $0xFFFFFFFF, %ebx
bench=
  imull %ebx, %eax
  movl $0xFFFFFFFF, %ebx


[inc_8]
desc=The inc instruction increments the contents of and 0x000000FF bit register by one.
pre=
  movl $0x000000FF, %ebx
bench=
  inc  %ebx
  movl $0x000000FF, %ebx


[dec_8]
desc=The inc instruction decrements the contents of and 0x000000FF bit register by one.
pre=
  movl $0x000000FF, %ebx
bench=
  dec  %ebx
  movl $0x000000FF, %ebx


[and_0]
desc=An AND operation of 0x00000000 and 0x00000000 bit registers.
pre=
  movl $0x00000000, %eax
  movl $0x00000000, %ebx
bench=
  and %ebx, %eax
  movl $0x00000000, %ebx


[and_32]
desc=An AND operation of 0xFFFFFFFF and 0xFFFFFFFF bit registers.
pre=
  movl $0xFFFFFFFF, %eax
  movl $0xFFFFFFFF, %ebx
bench=
  and %ebx, %eax
  movl $0xFFFFFFFF, %ebx


[or_0]
desc=A OR operation of 0x00000000 and 0x00000000 bit registers.
pre=
  movl $0x00000000, %eax
  movl $0x00000000, %ebx
bench=
  or %ebx, %eax
  movl $0x00000000, %ebx


[or_32]
desc=A OR operation of 0xFFFFFFFF and 0xFFFFFFFF bit registers.
pre=
  movl $0xFFFFFFFF, %eax
  movl $0xFFFFFFFF, %ebx
bench=
  or %ebx, %eax
  movl $0xFFFFFFFF, %ebx


[xor_0]
desc=A XOR operation of 0xFFFFFFFF and 0xFFFFFFFF bit registers.
pre=
  movl $0x00000000, %eax
  movl $0x00000000, %ebx
bench=
  xor %ebx, %eax
  movl $0x00000000, %ebx


[xor_32]
desc=A XOR operation of 0xFFFFFFFF and 0xFFFFFFFF bit registers.
pre=
  movl $0xFFFFFFFF, %eax
  movl $0xFFFFFFFF, %ebx
bench=
  xor %ebx, %eax
  movl $0xFFFFFFFF, %ebx


