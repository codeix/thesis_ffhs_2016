[nop]
desc="nop" is an pseudo-instruction and the assembler generates an alternative instruction that does nothing. This instruction is executed one time each loop.
bench=nop


[nop_nop]
desc="nop" is an pseudo-instruction and the assembler generates an alternative instruction that does nothing. This instruction is executed two time each loop.
bench=
  nop
  nop


[nop_nop_nop]
desc="nop" is an pseudo-instruction and the assembler generates an alternative instruction that does nothing. This instruction is executed three time each loop.
bench=
  nop
  nop
  nop


[add_0]
desc=An addition of 0x00000000 + 0x00000000 bits.
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  add r5, r3, r4


[add_32]
desc=An addition of 0xFFFFFFFF + 0xFFFFFFFF bits.
pre=
  ldr r3, = 0xFFFFFFFF
  ldr r4, = 0xFFFFFFFF
bench=
  add r5, r3, r4


[sadd8_0]
desc=Performs four 8-bit signed integer additions of 0x00000000+0x00000000 bits.
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  sadd8 r5, r3, r4


[sadd8_8]
desc=Performs four 8-bit signed integer additions of 0x000000FF + 0x000000FF bits.
pre=
  ldr r3, = 0x000000FF
  ldr r4, = 0x000000FF
bench=
  sadd8 r5, r3, r4

[sadd16_0]
desc=Performs four 16-bit signed integer additions of 0x00000000 + 0x00000000 bits.
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  sadd16 r5, r3, r4


[sadd16_8]
desc=Performs four 16-bit signed integer additions of 0x0000FFFF + 0x0000FFFF bits.
pre=
  ldr r3, = 0x0000FFFF
  ldr r4, = 0x0000FFFF
bench=
  sadd16 r5, r3, r4


[sub_0]
desc=An subtraction of 0x00000000 + 0x00000000 bits.
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  sub r5, r3, r4


[sub_32]
desc=An subtraction of 0xFFFFFFFF + 0xFFFFFFFF bits.
pre=
  ldr r3, = 0xFFFFFFFF
  ldr r4, = 0xFFFFFFFF
bench=
  sub r5, r3, r4


[lsr_0]
desc=Shift one postion to right with an 0x00000000 bit register.
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  lsr r5, r3, #1


[lsr_32]
desc=Shift one postion to right with an 0xFFFFFFFF bit register.
pre=
  ldr r3, = 0xFFFFFFFF
bench=
  lsr r5, r3, #1


[lsl_0]
desc=Shift one postion to left with an 0x00000000 bit register.
pre=
  ldr r3, = 0x0
bench=
  lsl r5, r3, #1


[lsl_32]
desc=Shift one postion to left with an 0xFFFFFFFF bit register.
pre=
  ldr r3, = 0xFFFFFFFF
bench=
  lsl r5, r3, #1


[mul_0]
desc=An multiplication of 0x00000000 * 0x00000000 bits.
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  mul r5, r3, r4


[mul_32]
desc=An multiplication of 0xFFFFFFFF * 0xFFFFFFFF bits.
pre=
  ldr r3, = 0xFFFFFFFF
  ldr r4, = 0xFFFFFFFF
bench=
  mul r5, r3, r4


[and_0]
desc=An AND operation of 0x00000000 and 0x00000000 bit registers.
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  and r5, r3, r4


[and_32]
desc=An AND operation of 0xFFFFFFFF and 0xFFFFFFFF bit registers.
pre=
  ldr r3, = 0xFFFFFFFF
  ldr r4, = 0xFFFFFFFF
bench=
  and r5, r3, r4


[or_0]
desc=An OR operation of 0x00000000 and 0x00000000 bit registers.
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  orr r5, r3, r4


[or_32]
desc=An OR operation of 0xFFFFFFFF and 0xFFFFFFFF bit registers.
pre=
  ldr r3, = 0xFFFFFFFF
  ldr r4, = 0xFFFFFFFF
bench=
  orr r5, r3, r4


[xor_0]
desc=An XOR operation of 0xFFFFFFFF and 0xFFFFFFFF bit registers.
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  eor r5, r3, r4


[xor_32]
desc=An XOR operation of 0xFFFFFFFF and 0xFFFFFFFF bit registers.
pre=
  ldr r3, = 0xFFFFFFFF
  ldr r4, = 0xFFFFFFFF
bench=
  eor r5, r3, r4



