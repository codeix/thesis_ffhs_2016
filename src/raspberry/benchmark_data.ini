[nop]
desc=do nothing
bench=nop


[nop_nop]
desc=do nothing but do it two times
bench=
  nop
  nop


[add_zero]
desc=0+0
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  add r5, r3, r4


[add_32]
desc=2^32 + 2^32
pre=
  ldr r3, = 0xFFFFFFFF
  ldr r4, = 0xFFFFFFFF
bench=
  add r5, r3, r4


[sadd8_zero]
desc=Performs four 8-bit signed integer additions 0+0
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  sadd8 r5, r3, r4


[sadd8_8]
desc=Performs four 8-bit signed integer additions 2^8+2^8
pre=
  ldr r3, = 0x000000FF
  ldr r4, = 0x000000FF
bench=
  sadd8 r5, r3, r4

[sadd16_zero]
desc=Performs four 16-bit signed integer additions 0+0
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  sadd16 r5, r3, r4


[sadd16_8]
desc=Performs four 16-bit signed integer additions 2^16+2^16
pre=
  ldr r3, = 0x0000FFFF
  ldr r4, = 0x0000FFFF
bench=
  sadd16 r5, r3, r4


[sub_zero]
desc=0-0
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  sub r5, r3, r4


[sub_32]
desc=2^32 - 2^32
pre=
  ldr r3, = 0xFFFFFFFF
  ldr r4, = 0xFFFFFFFF
bench=
  sub r5, r3, r4


[lsr_zero]
desc=move to right with an empty register
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  lsr r5, r3, #1


[lsr_32]
desc=move to right with an 2^32 register
pre=
  ldr r3, = 0xFFFFFFFF
bench=
  lsr r5, r3, #1


[lsl_zero]
desc=move to left with an empty register
pre=
  ldr r3, = 0x0
bench=
  lsl r5, r3, #1


[lsl_32]
desc=move to left on an 2^32
pre=
  ldr r3, = 0xFFFFFFFF
bench=
  lsl r5, r3, #1


[mul_zero]
desc=0*0
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  mul r5, r3, r4


[mul_32]
desc=2^32 * 2^32
pre=
  ldr r3, = 0xFFFFFFFF
  ldr r4, = 0xFFFFFFFF
bench=
  mul r5, r3, r4


[fadds_zero]
desc=0f+0f
pre=
  flds s3, = 0x0
  flds s4, = 0x0
bench=
  fadds s5, s3, s4


[fadds_32]
desc=2^32f + 2^32f
pre=
  flds s3, = 0xFFFFFFFF
  flds s4, = 0xFFFFFFFF
bench=
  fadds s5, s3, s4


[fsubs_zero]
desc=0f-0f
pre=
  flds s3, = 0x0
  flds s4, = 0x0
bench=
  fsubs s5, s3, s4


[fsubs_32]
desc=2^32f - 2^32f
pre=
  flds s3, = 0xFFFFFFFF
  flds s4, = 0xFFFFFFFF
bench=
  fsubs s5, s3, s4


[fmuls_zero]
desc=0f * 0f
pre=
  flds s3, = 0x0
  flds s4, = 0x0
bench=
  fmuls s5, s3, s4


[fmuls_32]
desc=2^32f * 2^32f
pre=
  flds s3, = 0xFFFFFFFF
  flds s4, = 0xFFFFFFFF
bench=
  fmuls s5, s3, s4


[fdivs_zero]
desc=0f / 0f
pre=
  flds s3, = 0x0
  flds s4, = 0x0
bench=
  fdivs s5, s3, s4


[fdivs_32]
desc=2^32f / 2^32f
pre=
  flds s3, = 0xFFFFFFFF
  flds s4, = 0xFFFFFFFF
bench=
  fdivs s5, s3, s4


[and_zero]
desc=0 and 0
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  and r5, r3, r4


[and_32]
desc=2^32 and 2^32
pre=
  ldr r3, = 0xFFFFFFFF
  ldr r4, = 0xFFFFFFFF
bench=
  and r5, r3, r4


[or_zero]
desc=0 or 0
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  orr r5, r3, r4


[or_32]
desc=2^32 or 2^32
pre=
  ldr r3, = 0xFFFFFFFF
  ldr r4, = 0xFFFFFFFF
bench=
  orr r5, r3, r4


[xor_zero]
desc=0 xor 0
pre=
  ldr r3, = 0x0
  ldr r4, = 0x0
bench=
  eor r5, r3, r4


[xor_32]
desc=2^32 xor 2^32
pre=
  ldr r3, = 0xFFFFFFFF
  ldr r4, = 0xFFFFFFFF
bench=
  eor r5, r3, r4



